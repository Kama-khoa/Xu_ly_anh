/**
 * Gaussian Filter Implementation
 * Thu·∫≠t to√°n l·ªçc Gaussian v·ªõi ph√©p nh√¢n ch·∫≠p (convolution)
 * File: ./src/gaussianFilter.js
 */

class GaussianFilter {
    /**
     * Ph∆∞∆°ng ph√°p thay th·∫ø khi g·∫∑p CORS error
     * √Åp d·ª•ng filter ƒë∆°n gi·∫£n b·∫±ng CSS filters
     * @param {HTMLImageElement} imageElement 
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @returns {HTMLCanvasElement}
     */
    applySimpleFilter(imageElement, canvas, ctx) {
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        
        // √Åp d·ª•ng Gaussian blur b·∫±ng CSS
        tempCtx.filter = `blur(${this.sigma}px)`;
        tempCtx.drawImage(imageElement, 0, 0);
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.filter = 'none';
        ctx.drawImage(tempCanvas, 0, 0);
        
        console.log('ƒê√£ √°p d·ª•ng Simple Gaussian Filter (CSS blur) do CORS restriction');
        return canvas;
    }

    /**
     * Constructor
     * @param {number} sigma - ƒê·ªô l·ªách chu·∫©n c·ªßa Gaussian kernel
     * @param {number} kernelSize - K√≠ch th∆∞·ªõc kernel (t·ª± ƒë·ªông t√≠nh n·∫øu kh√¥ng cung c·∫•p)
     */
    constructor(sigma = 1.0, kernelSize = null) {
        this.sigma = sigma;
        
        // T·ª± ƒë·ªông t√≠nh kernel size n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
        // Th∆∞·ªùng s·ª≠ d·ª•ng 6*sigma + 1 ƒë·ªÉ ƒë·∫£m b·∫£o kernel ƒë·ªß l·ªõn
        if (kernelSize === null) {
            this.kernelSize = Math.ceil(6 * sigma) | 1; // ƒê·∫£m b·∫£o l√† s·ªë l·∫ª
        } else {
            if (kernelSize % 2 === 0) {
                throw new Error('Kernel size ph·∫£i l√† s·ªë l·∫ª!');
            }
            this.kernelSize = kernelSize;
        }
        
        this.radius = Math.floor(this.kernelSize / 2);
        
        // T·∫°o Gaussian kernel
        this.kernel = this.createGaussianKernel();
        
        console.log(`Gaussian Filter initialized: sigma=${sigma}, kernel_size=${this.kernelSize}`);
        console.log('Gaussian Kernel:', this.kernel);
    }

    /**
     * T·∫°o Gaussian kernel 
     * @returns {Float32Array} - M·∫£ng ch·ª©a c√°c gi√° tr·ªã c·ªßa kernel
     */
    createGaussianKernel() {
        const kernel = new Float32Array(this.kernelSize);
        const sigma2 = 2 * this.sigma * this.sigma;
        let sum = 0;
        
        // T√≠nh to√°n gi√° tr·ªã Gaussian cho t·ª´ng v·ªã tr√≠ trong kernel
        for (let i = 0; i < this.kernelSize; i++) {
            const x = i - this.radius;
            const value = Math.exp(-(x * x) / sigma2);
            kernel[i] = value;
            sum += value;
        }
        
        // Normalize kernel ƒë·ªÉ t·ªïng b·∫±ng 1
        for (let i = 0; i < this.kernelSize; i++) {
            kernel[i] /= sum;
        }
        
        return kernel;
    }

    /**
     * √Åp d·ª•ng b·ªô l·ªçc Gaussian  l√™n ·∫£nh
     * Th·ª±c hi·ªán convolution theo c·∫£ 2 h∆∞·ªõng: ngang v√† d·ªçc
     * @param {HTMLImageElement} imageElement - Element ·∫£nh input
     * @returns {Promise<HTMLCanvasElement>} - Canvas ch·ª©a ·∫£nh ƒë√£ l·ªçc
     */
    async applyFilter(imageElement) {
        return new Promise((resolve, reject) => {
            try {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                canvas.width = imageElement.naturalWidth || imageElement.width;
                canvas.height = imageElement.naturalHeight || imageElement.height;
                
                ctx.drawImage(imageElement, 0, 0);
                
                let imageData;
                try {
                    imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                } catch (corsError) {
                    console.warn('CORS Error detected, using alternative method...');
                    resolve(this.applySimpleFilter(imageElement, canvas, ctx));
                    return;
                }
                
                console.log(`ƒêang √°p d·ª•ng Gaussian Filter v·ªõi sigma=${this.sigma}, kernel=${this.kernelSize}`);
                console.log(`K√≠ch th∆∞·ªõc ·∫£nh: ${canvas.width}x${canvas.height}`);
                
                // B∆∞·ªõc 1: Convolution theo h∆∞·ªõng ngang (horizontal)
                console.log('üîÑ B∆∞·ªõc 1: Convolution theo h∆∞·ªõng ngang...');
                const horizontalData = this.applyHorizontalConvolution(imageData, canvas.width, canvas.height);
                
                // B∆∞·ªõc 2: Convolution theo h∆∞·ªõng d·ªçc (vertical) 
                console.log('üîÑ B∆∞·ªõc 2: Convolution theo h∆∞·ªõng d·ªçc...');
                const finalData = this.applyVerticalConvolution(horizontalData, canvas.width, canvas.height);
                
                // C·∫≠p nh·∫≠t imageData v·ªõi k·∫øt qu·∫£ cu·ªëi c√πng
                for (let i = 0; i < imageData.data.length; i++) {
                    imageData.data[i] = finalData[i];
                }
                
                ctx.putImageData(imageData, 0, 0);
                
                console.log('‚úÖ Ho√†n th√†nh Gaussian Filter!');
                resolve(canvas);
                
            } catch (error) {
                console.error('‚ùå L·ªói khi √°p d·ª•ng Gaussian  Filter:', error);
                reject(error);
            }
        });
    }

    /**
     * √Åp d·ª•ng convolution theo h∆∞·ªõng ngang
     * @param {ImageData} imageData - D·ªØ li·ªáu ·∫£nh g·ªëc
     * @param {number} width - Chi·ªÅu r·ªông ·∫£nh
     * @param {number} height - Chi·ªÅu cao ·∫£nh
     * @returns {Uint8ClampedArray} - D·ªØ li·ªáu ·∫£nh sau khi l·ªçc ngang
     */
    applyHorizontalConvolution(imageData, width, height) {
        const data = imageData.data;
        const newData = new Uint8ClampedArray(data.length);
        
        console.log('Processing horizontal convolution...');
        
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const pixelIndex = (y * width + x) * 4;
                
                // T√≠nh convolution cho t·ª´ng k√™nh m√†u (R, G, B)
                const convResult = this.convolveHorizontal(data, x, y, width, height);
                
                newData[pixelIndex] = convResult.r;     // Red
                newData[pixelIndex + 1] = convResult.g; // Green  
                newData[pixelIndex + 2] = convResult.b; // Blue
                newData[pixelIndex + 3] = data[pixelIndex + 3]; // Alpha gi·ªØ nguy√™n
            }
            
            // Log progress
            if (y % Math.floor(height / 10) === 0) {
                console.log(`Horizontal progress: ${Math.round((y / height) * 100)}%`);
            }
        }
        
        return newData;
    }

    /**
     * √Åp d·ª•ng convolution theo h∆∞·ªõng d·ªçc
     * @param {Uint8ClampedArray} inputData - D·ªØ li·ªáu ·∫£nh t·ª´ b∆∞·ªõc horizontal
     * @param {number} width - Chi·ªÅu r·ªông ·∫£nh
     * @param {number} height - Chi·ªÅu cao ·∫£nh
     * @returns {Uint8ClampedArray} - D·ªØ li·ªáu ·∫£nh sau khi l·ªçc d·ªçc
     */
    applyVerticalConvolution(inputData, width, height) {
        const newData = new Uint8ClampedArray(inputData.length);
        
        console.log('Processing vertical convolution...');
        
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const pixelIndex = (y * width + x) * 4;
                
                // T√≠nh convolution cho t·ª´ng k√™nh m√†u (R, G, B)
                const convResult = this.convolveVertical(inputData, x, y, width, height);
                
                newData[pixelIndex] = convResult.r;     // Red
                newData[pixelIndex + 1] = convResult.g; // Green  
                newData[pixelIndex + 2] = convResult.b; // Blue
                newData[pixelIndex + 3] = inputData[pixelIndex + 3]; // Alpha gi·ªØ nguy√™n
            }
            
            // Log progress
            if (y % Math.floor(height / 10) === 0) {
                console.log(`Vertical progress: ${Math.round((y / height) * 100)}%`);
            }
        }
        
        return newData;
    }

    /**
     * Th·ª±c hi·ªán convolution theo h∆∞·ªõng ngang cho m·ªôt pixel
     * @param {Uint8ClampedArray} data - D·ªØ li·ªáu pixel 
     * @param {number} centerX - T·ªça ƒë·ªô X c·ªßa pixel trung t√¢m
     * @param {number} centerY - T·ªça ƒë·ªô Y c·ªßa pixel trung t√¢m
     * @param {number} width - Chi·ªÅu r·ªông ·∫£nh
     * @param {number} height - Chi·ªÅu cao ·∫£nh
     * @returns {Object} - K·∫øt qu·∫£ convolution {r, g, b}
     */
    convolveHorizontal(data, centerX, centerY, width, height) {
        let sumR = 0, sumG = 0, sumB = 0;
        
        // Duy·ªát qua kernel theo h∆∞·ªõng ngang
        for (let i = 0; i < this.kernelSize; i++) {
            const dx = i - this.radius;
            const newX = centerX + dx;
            
            // X·ª≠ l√Ω bi√™n b·∫±ng c√°ch clamp (gi·ªØ trong bounds)
            const validX = Math.max(0, Math.min(width - 1, newX));
            const pixelIndex = (centerY * width + validX) * 4;
            
            const kernelValue = this.kernel[i];
            
            sumR += data[pixelIndex] * kernelValue;         // Red
            sumG += data[pixelIndex + 1] * kernelValue;     // Green
            sumB += data[pixelIndex + 2] * kernelValue;     // Blue
        }
        
        return {
            r: Math.round(Math.max(0, Math.min(255, sumR))),
            g: Math.round(Math.max(0, Math.min(255, sumG))),
            b: Math.round(Math.max(0, Math.min(255, sumB)))
        };
    }

    /**
     * Th·ª±c hi·ªán convolution theo h∆∞·ªõng d·ªçc cho m·ªôt pixel
     * @param {Uint8ClampedArray} data - D·ªØ li·ªáu pixel 
     * @param {number} centerX - T·ªça ƒë·ªô X c·ªßa pixel trung t√¢m
     * @param {number} centerY - T·ªça ƒë·ªô Y c·ªßa pixel trung t√¢m
     * @param {number} width - Chi·ªÅu r·ªông ·∫£nh
     * @param {number} height - Chi·ªÅu cao ·∫£nh
     * @returns {Object} - K·∫øt qu·∫£ convolution {r, g, b}
     */
    convolveVertical(data, centerX, centerY, width, height) {
        let sumR = 0, sumG = 0, sumB = 0;
        
        // Duy·ªát qua kernel theo h∆∞·ªõng d·ªçc
        for (let i = 0; i < this.kernelSize; i++) {
            const dy = i - this.radius;
            const newY = centerY + dy;
            
            // X·ª≠ l√Ω bi√™n b·∫±ng c√°ch clamp (gi·ªØ trong bounds)
            const validY = Math.max(0, Math.min(height - 1, newY));
            const pixelIndex = (validY * width + centerX) * 4;
            
            const kernelValue = this.kernel[i];
            
            sumR += data[pixelIndex] * kernelValue;         // Red
            sumG += data[pixelIndex + 1] * kernelValue;     // Green
            sumB += data[pixelIndex + 2] * kernelValue;     // Blue
        }
        
        return {
            r: Math.round(Math.max(0, Math.min(255, sumR))),
            g: Math.round(Math.max(0, Math.min(255, sumG))),
            b: Math.round(Math.max(0, Math.min(255, sumB)))
        };
    }

    /**
     * Chuy·ªÉn ƒë·ªïi canvas th√†nh base64 string
     * @param {HTMLCanvasElement} canvas 
     * @param {string} format - ƒê·ªãnh d·∫°ng ·∫£nh ('image/png', 'image/jpeg')
     * @param {number} quality - Ch·∫•t l∆∞·ª£ng ·∫£nh (0.0 - 1.0)
     * @returns {string} - Base64 string
     */
    canvasToDataURL(canvas, format = 'image/png', quality = 0.9) {
        return canvas.toDataURL(format, quality);
    }

    /**
     * Test function - T·∫°o ·∫£nh nhi·ªÖu ƒë·ªÉ test
     * @param {number} width - Chi·ªÅu r·ªông ·∫£nh
     * @param {number} height - Chi·ªÅu cao ·∫£nh
     * @returns {HTMLCanvasElement} - Canvas ch·ª©a ·∫£nh nhi·ªÖu
     */
    createNoisyTestImage(width = 300, height = 300) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        canvas.width = width;
        canvas.height = height;
        
        // T·∫°o pattern v·ªõi nhi·ªÅu chi ti·∫øt
        for (let y = 0; y < height; y += 20) {
            for (let x = 0; x < width; x += 20) {
                const hue = (x + y) % 360;
                ctx.fillStyle = `hsl(${hue}, 70%, 60%)`;
                ctx.fillRect(x, y, 15, 15);
            }
        }
        
        // Th√™m nhi·ªÖu high frequency
        const imageData = ctx.getImageData(0, 0, width, height);
        const data = imageData.data;
        
        for (let i = 0; i < data.length; i += 4) {
            const noise = (Math.random() - 0.5) * 80;
            data[i] = Math.max(0, Math.min(255, data[i] + noise));
            data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + noise));
            data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + noise));
        }
        
        ctx.putImageData(imageData, 0, 0);
        console.log('ƒê√£ t·∫°o ·∫£nh test v·ªõi nhi·ªÖu cho Gaussian !');
        
        return canvas;
    }
}

// Export ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c file kh√°c
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GaussianFilter;
}

// H√†m helper ƒë·ªÉ test Gaussian  Filter
function testGaussianFilter() {
    console.log('üß™ B·∫Øt ƒë·∫ßu test Gaussian  Filter...');
    
    const filter = new GaussianFilter(2.0); // sigma = 2.0
    
    // T·∫°o ·∫£nh test
    const noisyCanvas = filter.createNoisyTestImage(200, 200);
    
    // T·∫°o img element t·ª´ canvas
    const img = new Image();
    img.onload = async function() {
        console.log('‚úÖ ·∫¢nh test ƒë√£ load');
        
        try {
            console.log('‚è±Ô∏è B·∫Øt ƒë·∫ßu √°p d·ª•ng Gaussian  Filter...');
            const startTime = performance.now();
            
            const filteredCanvas = await filter.applyFilter(img);
            
            const endTime = performance.now();
            console.log(`‚úÖ ƒê√£ √°p d·ª•ng Gaussian  Filter th√†nh c√¥ng! Th·ªùi gian: ${Math.round(endTime - startTime)}ms`);
            console.log('üìä K√≠ch th∆∞·ªõc ·∫£nh sau l·ªçc:', filteredCanvas.width + 'x' + filteredCanvas.height);
            
            // C√≥ th·ªÉ th√™m code ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
            // document.body.appendChild(noisyCanvas);    // ·∫¢nh g·ªëc
            // document.body.appendChild(filteredCanvas); // ·∫¢nh ƒë√£ l·ªçc
            
        } catch (error) {
            console.error('‚ùå L·ªói khi test:', error);
        }
    };
    
    img.src = noisyCanvas.toDataURL();
}